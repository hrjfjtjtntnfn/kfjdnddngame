name: NRO Web + MySQL + Apache httpd.conf + Cloudflared

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  HTTPD_CONF_PATH: /data/data/com.termux/files/usr/etc/apache2/httpd.conf
  DOCUMENT_ROOT: /storage/emulated/0/.source/game/testweb/new3
  APACHE_PORT: 9090
  MYSQL_ROOT_PASSWORD: root
  ADMIN_USER: admin
  ADMIN_PASS: 123456

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y mysql-server php php-mbstring php-zip php-gd php-json php-curl php-mysql unzip wget openssh-client apache2 libapache2-mod-php

      - name: Stop MySQL if running
        run: sudo systemctl stop mysql || true

      - name: Start MySQL with skip-grant-tables
        run: |
          sudo mkdir -p /var/run/mysqld
          sudo chown mysql:mysql /var/run/mysqld
          sudo mysqld_safe --skip-grant-tables --skip-networking &
          sleep 8

      - name: Set MySQL root password
        run: |
          mysql -uroot <<SQL
          FLUSH PRIVILEGES;
          ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${{ env.MYSQL_ROOT_PASSWORD }}';
          FLUSH PRIVILEGES;
          SQL
          echo "✅ MySQL root password set"

      - name: Restart MySQL normally
        run: |
          sudo pkill mysqld || true
          sudo systemctl start mysql
          sleep 5
          mysql -uroot -p${{ env.MYSQL_ROOT_PASSWORD }} -e "SELECT VERSION();"
          echo "✅ MySQL restarted"

      - name: Create databases and import SQL
        run: |
          mysql -uroot -p${{ env.MYSQL_ROOT_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS nro_acc;"
          [ -f ./nro_acc.sql ] && mysql -uroot -p${{ env.MYSQL_ROOT_PASSWORD }} nro_acc < ./nro_acc.sql || echo "⚠️ nro_acc.sql missing"
          mysql -uroot -p${{ env.MYSQL_ROOT_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS nro_data;"
          [ -f ./nro_data.sql ] && mysql -uroot -p${{ env.MYSQL_ROOT_PASSWORD }} nro_data < ./nro_data.sql || echo "⚠️ nro_data.sql missing"
          echo "✅ Databases created and imported"

      - name: Create admin user
        run: |
          mysql -uroot -p${{ env.MYSQL_ROOT_PASSWORD }} -e "CREATE USER IF NOT EXISTS '${{ env.ADMIN_USER }}'@'%' IDENTIFIED BY '${{ env.ADMIN_PASS }}';"
          mysql -uroot -p${{ env.MYSQL_ROOT_PASSWORD }} -e "GRANT ALL PRIVILEGES ON *.* TO '${{ env.ADMIN_USER }}'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;"
          echo "✅ Admin user created"

      - name: Download NRO release ZIP
        run: |
          wget -q https://github.com/hrjfjtjtntnfn/lode/releases/download/V.838383/new3.zip -O new3.zip
          unzip -q new3.zip || true
          [ -d "new3/new3" ] && mv new3/new3/* new3/
          echo "✅ NRO files ready"

      - name: Deploy NRO web
        run: |
          sudo mkdir -p "${{ env.DOCUMENT_ROOT }}"
          sudo cp -r new3/* "${{ env.DOCUMENT_ROOT }}/"
          sudo rm -f "${{ env.DOCUMENT_ROOT }}/index.html"
          sudo chown -R www-data:www-data "${{ env.DOCUMENT_ROOT }}"
          sudo chmod -R 755 "${{ env.DOCUMENT_ROOT }}"
          [ -f "${{ env.DOCUMENT_ROOT }}/.htaccess" ] || echo "⚠️ .htaccess missing"

      - name: Configure httpd.conf for DocumentRoot
        run: |
          sudo bash -c "cat >${{ env.HTTPD_CONF_PATH }} <<EOF
          ServerRoot \"/data/data/com.termux/files/usr\"
          Listen ${{ env.APACHE_PORT }}
          LoadModule php_module libexec/apache2/libphp.so
          AddType application/x-httpd-php .php
          LoadModule mpm_prefork_module libexec/apache2/mod_mpm_prefork.so
          LoadModule authn_core_module libexec/apache2/mod_authn_core.so
          LoadModule authz_core_module libexec/apache2/mod_authz_core.so
          LoadModule access_compat_module libexec/apache2/mod_access_compat.so
          LoadModule mime_module libexec/apache2/mod_mime.so
          LoadModule log_config_module libexec/apache2/mod_log_config.so
          LoadModule env_module libexec/apache2/mod_env.so
          LoadModule headers_module libexec/apache2/mod_headers.so
          LoadModule setenvif_module libexec/apache2/mod_setenvif.so
          LoadModule unixd_module libexec/apache2/mod_unixd.so
          LoadModule status_module libexec/apache2/mod_status.so
          LoadModule autoindex_module libexec/apache2/mod_autoindex.so
          LoadModule dir_module libexec/apache2/mod_dir.so
          LoadModule alias_module libexec/apache2/mod_alias.so
          LoadModule rewrite_module libexec/apache2/mod_rewrite.so
          
          ServerAdmin you@example.com
          ServerName localhost:$APACHE_PORT
          <Directory />
            AllowOverride none
            Require all denied
          </Directory>
          DocumentRoot \"${{ env.DOCUMENT_ROOT }}\"
          <Directory \"${{ env.DOCUMENT_ROOT }}\">
            Options Indexes FollowSymLinks
            AllowOverride All
            Require all granted
          </Directory>
          <IfModule dir_module>
            DirectoryIndex index.php
          </IfModule>
          <Files \".ht*\">
            Require all denied
          </Files>
          ErrorLog \"var/log/apache2/error_log\"
          LogLevel warn
          CustomLog \"var/log/apache2/access_log\" common
          EOF"

      - name: Start Apache with custom httpd.conf
        run: |
          sudo apachectl -f ${{ env.HTTPD_CONF_PATH }} -k restart
          sleep 3
          curl -I http://localhost:${{ env.APACHE_PORT }}

      - name: Install Cloudflared and tunnel
        run: |
          wget -q -O /usr/local/bin/cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          sudo chmod +x /usr/local/bin/cloudflared
          nohup cloudflared tunnel --url http://localhost:${{ env.APACHE_PORT }} --no-autoupdate > cloudflared.log 2>&1 &
          sleep 10
          grep -Eo 'https?://[^ ]+trycloudflare.com' cloudflared.log | head -n1 || echo "⚠️ Apache public URL not found"

      - name: Keep runner alive
        run: sleep 6000
